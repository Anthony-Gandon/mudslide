#!/bin/bash

let failures=0

# do simple tests first
for k in 8 14 20; do
  outfile=simple/k${k}/k${k}.out
  reffile=simple/k${k}/k${k}.ref

  printf "    %-80s\r" "Running Tully's simple avoided crossing with k = $k a.u."

  python ../fssh.py -s 1 -m simple -k $k $k -x -10 --dt 5 -n 1 -z 200 -o "single" -j 1 > $outfile
  ktest=$(python check_trace.py $outfile $reffile)

  if [ "$ktest" != "" ]; then
      printf "%-80s\n" "Tully's simple avoided crossing with input momentum = $k au failed!"
      let failures+=1
  fi
done

# do dual avoided crossing tests next
for k in 20 50 100; do
  outfile=dual/k${k}/k${k}.out
  reffile=dual/k${k}/k${k}.ref

  printf "    %-80s\r" "Running Tully's dual avoided crossing with k = $k a.u."

  python ../fssh.py -s 1 -m dual -k $k $k -x -10 --dt 5 -n 1 -z 200 -o "single" -j 1 > $outfile
  ktest=$(python check_trace.py $outfile $reffile)

  if [ "$ktest" != "" ]; then
      printf "%-80s\n" "Tully's dual avoided crossing with input momentum = $k au failed!"
      let failures+=1
  fi
done

# do extended tests next
for k in 10 15 20; do
  outfile=extended/k${k}/k${k}.out
  reffile=extended/k${k}/k${k}.ref

  printf "    %-80s\r" "Running Tully's extended model with k = $k a.u."

  python ../fssh.py -s 1 -m extended -k $k $k -x -10 --dt 5 -n 1 -z 200 -o "single" -j 1 > $outfile
  ktest=$(python check_trace.py $outfile $reffile)

  if [ "$ktest" != "" ]; then
      printf "%-80s\n" "Tully's extended model with input momentum = $k au failed!"
      let failures+=1
  fi
done

if [ $failures -eq 0 ]; then
  printf "%-84s\n" "All tests passed!"
else
  printf "%-84s\n" "Tests finished with $failures failures"
fi
